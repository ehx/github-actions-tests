name: Release Executables

on:
  workflow_dispatch:

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository with tags
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16.1.0'

    - name: Install dependencies
      run: npm install

    - name: Build executables
      run: |
        if [ ${{ matrix.os }} == 'macos-latest' ]; then
          npm run make -- --platform darwin
        elif [ ${{ matrix.os }} == 'windows-latest' ]; then
          npm run make -- --platform win32
        fi

    - name: Check for files in out directory (Windows)
      if: matrix.os == 'windows-latest'
      id: check_files_windows
      run: |
        $found_file = Get-ChildItem -Path ./out -Recurse -File | Where-Object { $_.Name -like "github-action-tests-win32-*" }
        if (-not $found_file) {
          Write-Host "No files found in out directory. Exiting..."
          exit 1
        }
        Write-Host "Files found in out directory:"
        Write-Host $found_file
        echo "found_file=$found_file" >> $env:GITHUB_ENV
        $asset_name = Split-Path -Path $found_file -Leaf
        echo "asset_name=$asset_name" >> $env:GITHUB_ENV

    - name: Check for files in out directory (macOS)
      if: matrix.os == 'macos-latest'
      id: check_files_macos
      run: |
        found_file=$(find ./out -type f -name "github-action-tests-darwin-*")
        if [ -z "$found_file" ]; then
          echo "No files found in out directory. Exiting..."
          exit 1
        else
          echo "Files found in out directory:"
          echo "$found_file"
          echo "found_file=$found_file" >> $GITHUB_ENV
          asset_name=$(echo "$found_file" | rev | cut -d '/' -f 1 | rev)
          echo "asset_name=$asset_name" >> $GITHUB_ENV
        fi


    - name: Check and Increase Tag Version
      id: check_and_increase_version
      run: |
        latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
        echo "Latest tag: $latest_tag"
        
        if [ -z "$latest_tag" ]; then
          echo "No existing tags found. Creating new tag v1.0.0"
          new_version="1.0.0"
          git tag -a v1.0.0 -m "Version 1.0.0"
        else
          echo "Existing tag found: $latest_tag"
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"
          ((patch++))
          new_version="$major.$minor.$patch"
          echo "New version will be: v$new_version"
        fi
        
        echo "new_version=$new_version" >> $GITHUB_ENV

    - name: Create and Push Tag
      run: |
        git tag -a v${{ env.new_version }} -m "Version ${{ env.new_version }}"
        git push origin v${{ env.new_version }}
        git archive --format=tar.gz --output=${{ env.new_version }}.tar.gz HEAD file_in_tag.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.new_version }}
        release_name: Release v${{ env.new_version }}
        body: |
          Release for version v${{ env.new_version }}
        draft: false

    - name: Upload executables
      id: upload-release-assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.found_file }}
        asset_name: ${{ env.asset_name }}
        asset_content_type: application/zip