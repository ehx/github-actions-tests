name: Release Executables

on:
  workflow_dispatch:

jobs:
  release:
    strategy:
      matrix:
        os: [ macos-latest ]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository with tags
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16.1.0'

    - name: Create output directory
      run: mkdir -p out

    - name: Install dependencies
      run: npm install

    - name: Build executables
      run: |
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          npm run make -- --platform darwin
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          npm run make -- --platform win32
        fi

    - name: Check and Increase Tag Version
      id: check_and_increase_version
      run: |
        latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
        echo "Latest tag: $latest_tag"
        
        if [ -z "$latest_tag" ]; then
          echo "No existing tags found. Creating new tag v1.0.0"
          new_version="1.0.0"
          git tag -a v1.0.0 -m "Version 1.0.0"
        else
          echo "Existing tag found: $latest_tag"
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"
          ((patch++))
          new_version="$major.$minor.$patch"
          echo "New version will be: v$new_version"
        fi
        
        echo "new_version=$new_version" >> $GITHUB_ENV

    - name: Create and Push Tag
      run: |
        git tag -a v${{ env.new_version }} -m "Version ${{ env.new_version }}"
        git push origin v${{ env.new_version }}
        git archive --format=tar.gz --output=${{ env.new_version }}.tar.gz HEAD file_in_tag.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.new_version }}
        release_name: Release v${{ env.new_version }}
        body: |
          Release for version v${{ env.new_version }}
        draft: false

    - name: Upload executables
      id: upload-release-assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./out/*