name: Release Executables

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository with tags
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16.1.0'

    - name: Install Wine
      run: |
        sudo dpkg --add-architecture i386
        sudo mkdir -pm755 /etc/apt/keyrings
        curl -fsSL https://dl.winehq.org/wine-builds/winehq.key | sudo tee /etc/apt/keyrings/winehq-archive.key
        sudo wget -NP /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/ubuntu/dists/$(lsb_release -cs)/winehq-$(lsb_release -cs).sources
        sudo apt update
        sudo apt install --install-recommends winehq-stable

    - name: Install dependencies
      run: npm install

    - name: Build executables
      run: |
        npm run make -- --platform darwin
        npm run make -- --platform win32

    - name: Check for files in out directory
      id: check_files
      run: |
        mac_found_file=$(find ./out -type f -name "github-action-tests-darwin-*")
        if [ -z "$mac_found_file" ]; then
          echo "No files found for mac in out directory. Exiting..."
          exit 1
        fi
        
        echo "Mac file found at: $mac_found_file"
        echo "mac_found_file=$mac_found_file" >> $GITHUB_ENV
        mac_asset_name=$(echo "$mac_found_file" | rev | cut -d '/' -f 1 | rev)
        echo "mac_asset_name=$mac_asset_name" >> $GITHUB_ENV


        win_found_file=$(find ./out -type f -name "github-action-tests-*Setup.exe")
        if [ -z "$win_found_file" ]; then
          echo "No files found for windows in out directory. Exiting..."
          exit 1
        fi

        echo "Win file found at: $win_found_file"
        echo "win_found_file=$win_found_file" >> $GITHUB_ENV
        win_asset_name=$(echo "$win_found_file" | rev | cut -d '/' -f 1 | rev)
        echo "win_asset_name=$win_asset_name" >> $GITHUB_ENV

    - name: Check and Increase Tag Version
      id: check_and_increase_version
      run: |
        latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
        echo "Latest tag: $latest_tag"
        
        if [ -z "$latest_tag" ]; then
          echo "No existing tags found. Creating new tag v1.0.0"
          new_version="1.0.0"
          git tag -a v1.0.0 -m "Version 1.0.0"
        else
          echo "Existing tag found: $latest_tag"
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"
          ((patch++))
          new_version="$major.$minor.$patch"
          echo "New version will be: v$new_version"
        fi
        
        echo "new_version=$new_version" >> $GITHUB_ENV

    - name: Create and Push Tag
      run: |
        git tag -a v${{ env.new_version }} -m "Version ${{ env.new_version }}"
        git push origin v${{ env.new_version }}
        git archive --format=tar.gz --output=${{ env.new_version }}.tar.gz HEAD file_in_tag.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.new_version }}
        release_name: Release v${{ env.new_version }}
        body: |
          Release for version v${{ env.new_version }}
        draft: false

    - name: Upload executable (Macos)
      if: ${{ env.mac_found_file }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.mac_found_file }}
        asset_name: ${{ env.mac_asset_name }}
        asset_content_type: application/zip

    - name: Upload executable (Windows)
      if: ${{ env.win_found_file }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.win_found_file }}
        asset_name: ${{ env.win_asset_name }}
        asset_content_type: application/zip